        - module UnStableManifolds
        - 
        - include("UnStableManifolds/Maps.jl")
        - include("UnStableManifolds/Util.jl")
        - 
        - using UnStableManifolds.Util: broadcast_size
        - 
        - # function tuple_isapprox_cuda((x1, y1), (x2, y2))
        - #     x = (x1 - x2)^2
        - #     y = (y1 - y2)^2
        - #     CUDAnative.sqrt(x^2 + y^2) < 1e-10
        - # end
        - 
        - 
        - # function tuple_isapprox((x1, y1), (x2, y2))
        - #     x = (x1 - x2)^2
        - #     y = (y1 - y2)^2
        - #     sqrt(x^2 + y^2) < 1e-10
        - # end
        - 
        - 
        - function iterates(
        -     f,
        -     x :: AbstractArray,
        -     args...,
        -     ;
        -     make,
        -     keep=make+1,
        -     callback=nothing,
        -     callback_depth=0,
        -     show_iterations=false,
        - )
 47097580     if make < 0
        0         throw(ArgumentError)
        -     end
        0     if keep < 1 || make <= keep
        0         throw(ArgumentError)
        -     end
        - 
        0     buffer_size = broadcast_size(x, args...)
       96     buffer_size = (buffer_size..., keep)
   120384     buffer = similar(x, buffer_size)
        - 
        -     # TODO:
        -     # We should use a dedicated ring buffer type. At the moment, I can't be
        -     # bothered to implement it properly in a language that allows ARBITRARY
        -     # INDEXING STYLES.
 18522265     slices = collect(eachslice(buffer, dims=length(buffer_size)))
    30864     length_slices = length(slices)
      288     @inline function get_slice_index(i)
   231570         mod(i-1, length_slices) + 1
        -     end
      320     @inline function get_slice(i)
        -         slices[get_slice_index(i)]
        -     end
        - 
        -     # Unfortunately, the zeroth iteration is special.
        -     i = 1
 11805072     slices[i] .= x
     1664     x = slices[i]
      400     @inline function do_callback(i)
        -         if callback ≠ nothing && i ≥ keep
        -             deep = tuple(map(get_slice, i-1:-1:i-callback_depth)...)
        -             # It's simpler to just perform this call with i-1 rather than
        -             # reducing i by 1 and changing everything else.
        -             callback(i-1, x, deep...)
        -         end
        -     end
        -     do_callback(i)
        -     i += 1
        -     # It's a good thing that the index variable in a for-loop is scoped, but I
        -     # wish we could "remember" it if we wanted to.
        0     while i ≤ make
        -         # You can't use Ints in an if-expression (good), but you CAN compare
        -         # Bools to Ints and do arithmetic on them???
        0         if show_iterations ≠ 0 && (i - 1) % show_iterations == 0
        0             @show i
        -         end
        0         slice = get_slice(i)
 15788411         slice .= f.(x, args...)
        0         x = slice
        -         do_callback(i)
        0         i += 1
        -     end
        0     i = get_slice_index(i)
 23568203     cat(slices[i+1:end]..., slices[1:i]..., dims=length(buffer_size))
        - end
        - 
        - 
        - # If we had higher-kinded types (and some more powerful static type expressions;
        - # e.g., "strict subtype" or "is not abstract"), we could say "all of these
        - # values need to be a subtype of a common concrete array type." Alas, we cannot.
        - #
        - # If we had a nontrivial least upper bound operator on types, we could at least
        - # enforce that invariant dynamically. Alas, we cannot.
        - #
        - # So the only option is the lame one: just default to Array if x isn't an
        - # AbstractArray.
        - #
        - # Why even bother with PLT?
        - function iterates(f, x, args...; kwargs...)
        -     iterates(f, [x], args...; kwargs...)
        - end
        - 
        - 
        - function convergence(
        -     f,
        -     x :: AbstractArray,
        -     args...,
        -     ;
        -     make,
        -     approx,
        - )
        -     ret_size = broadcast_size(x, args...)
        -     ret = similar(x, Int, ret_size)
        -     fill!(ret, 0)
        -     function callback_kernel(orig, i, x1, x0)
        -         if orig ≠ 0
        -             return orig
        -         end
        -         approx(x1, x0) ? i : 0
        -     end
        -     function callback(i, x1, x0)
        -         ret .= callback_kernel.(ret, i, x1, x0)
        -     end
        -     result = iterates(
        -         f,
        -         x,
        -         args...,
        -         make=make,
        -         keep=2,
        -         callback=callback,
        -         callback_depth=1,
        -     )
        -     ret, result
        - end
        - 
        - 
        - # Do the lame thing.
        - function convergence(
        -     f,
        -     x,
        -     args...,
        -     ;
        -     kwargs...
        - )
        -     convergence(f, [x], args...; kwargs...)
        - end
        - 
        - 
        - end
        - 
